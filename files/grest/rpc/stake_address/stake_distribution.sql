CREATE TABLE IF NOT EXISTS GREST.STAKE_DISTRIBUTION (
    STAKE_ADDRESS varchar,
    POOL_ID varchar,
    TOTAL_BALANCE numeric,
    UTXO numeric,
    REWARDS numeric,
    WITHDRAWALS numeric,
    REWARDS_AVAILABLE numeric,
    RESERVES numeric,
    TREASURY numeric,
    PRIMARY KEY (STAKE_ADDRESS)
);

INSERT INTO GREST.STAKE_DISTRIBUTION
SELECT
    STAKE_ADDRESS,
    POOL_ID,
    (COALESCE(UTXO_T.UTXO, 0) + COALESCE(REWARDS_T.REWARDS, 0) - COALESCE(WITHDRAWALS_T.WITHDRAWALS, 0) + COALESCE(RESERVES_T.RESERVES, 0) + COALESCE(TREASURY_T.TREASURY, 0)) / 1000000 AS TOTAL_BALANCE,
    UTXO_T.UTXO / 1000000 AS UTXO,
    REWARDS_T.REWARDS / 1000000 AS REWARDS,
    WITHDRAWALS_T.WITHDRAWALS / 1000000 AS WITHDRAWALS,
    (COALESCE(REWARDS_T.REWARDS, 0) - COALESCE(WITHDRAWALS_T.WITHDRAWALS, 0)) / 1000000 AS REWARDS_AVAILABLE,
    RESERVES_T.RESERVES / 1000000 AS RESERVES,
    TREASURY_T.TREASURY / 1000000 AS TREASURY
FROM (
    SELECT
        STAKE_ADDRESS.ID,
        STAKE_ADDRESS.VIEW AS STAKE_ADDRESS,
        POOL_HASH.VIEW AS POOL_ID
    FROM
        STAKE_ADDRESS
        INNER JOIN DELEGATION ON DELEGATION.ADDR_ID = STAKE_ADDRESS.ID
        INNER JOIN POOL_HASH ON POOL_HASH.ID = DELEGATION.POOL_HASH_ID
    WHERE
        NOT EXISTS (
            SELECT
                TRUE
            FROM
                DELEGATION D
            WHERE
                D.ADDR_ID = DELEGATION.ADDR_ID
                AND D.ID > DELEGATION.ID)
            AND NOT EXISTS (
                SELECT
                    TRUE
                FROM
                    STAKE_DEREGISTRATION
                WHERE
                    STAKE_DEREGISTRATION.ADDR_ID = DELEGATION.ADDR_ID
                    AND STAKE_DEREGISTRATION.TX_ID > DELEGATION.TX_ID)) T1
    LEFT JOIN LATERAL (
        SELECT
            COALESCE(SUM(VALUE), 0) AS UTXO
        FROM
            TX_OUT
            LEFT JOIN TX_IN ON TX_OUT.TX_ID = TX_IN.TX_OUT_ID
                AND TX_OUT.INDEX::smallint = TX_IN.TX_OUT_INDEX::smallint
        WHERE
            TX_OUT.STAKE_ADDRESS_ID = T1.ID
            AND TX_IN.TX_IN_ID IS NULL) UTXO_T ON TRUE
    LEFT JOIN LATERAL (
        SELECT
            COALESCE(SUM(REWARD.AMOUNT), 0) AS REWARDS
        FROM
            REWARD
        WHERE
            REWARD.ADDR_ID = T1.ID
            AND REWARD.EPOCH_NO < (
                SELECT
                    MAX(EPOCH_NO)
                FROM
                    REWARD)
            GROUP BY
                T1.ID) REWARDS_T ON TRUE
    LEFT JOIN LATERAL (
        SELECT
            COALESCE(SUM(WITHDRAWAL.AMOUNT), 0) AS WITHDRAWALS
        FROM
            WITHDRAWAL
        WHERE
            WITHDRAWAL.ADDR_ID = T1.ID
        GROUP BY
            T1.ID) WITHDRAWALS_T ON TRUE
    LEFT JOIN LATERAL (
        SELECT
            COALESCE(SUM(RESERVE.AMOUNT), 0) AS RESERVES
        FROM
            RESERVE
        WHERE
            RESERVE.ADDR_ID = T1.ID
        GROUP BY
            T1.ID) RESERVES_T ON TRUE
    LEFT JOIN LATERAL (
        SELECT
            COALESCE(SUM(TREASURY.AMOUNT), 0) AS TREASURY
        FROM
            TREASURY
        WHERE
            TREASURY.ADDR_ID = T1.ID
        GROUP BY
            T1.ID) TREASURY_T ON TRUE
ON CONFLICT (STAKE_ADDRESS)
    DO UPDATE SET
        POOL_ID = EXCLUDED.POOL_ID,
        UTXO = EXCLUDED.UTXO,
        REWARDS = EXCLUDED.REWARDS,
        WITHDRAWALS = EXCLUDED.WITHDRAWALS,
        REWARDS_AVAILABLE = EXCLUDED.REWARDS_AVAILABLE,
        RESERVES = EXCLUDED.RESERVES,
        TREASURY = EXCLUDED.TREASURY;

